name: Package PowerShell App - Master Branch

on:
  push:
    branches:
      - master
    paths:
      - 'Scripts/*'
      - 'ScriptManager.ps1'
      - 'modules/*'
      - 'UnitTests/*'
      - .github/workflows/workflow.yml
      - 'package.psd1'
      - 'icon.ico'

jobs:
  unittest:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Pester
        shell: pwsh
        run: |
          $PesterModule = Get-Module -ListAvailable -Name Pester
          if ($PesterModule) {
              if ($PesterModule.Version -eq "5.7.1") {
                  Write-Host "Pester version 5.7.1 is installed."
                  Import-Module Pester -RequiredVersion 5.7.1
              } else {
                  Write-Host "Pester is installed, but the version is $($PesterModule.Version).  Expected version 5.7.1."
                  Write-Host "Installing Pester version 5.7.1..."
                  Install-Module -Name Pester -RequiredVersion 5.7.1 -Force -SkipPublisherCheck
                  Import-Module Pester -RequiredVersion 5.7.1
              }
          } else {
              Write-Host "Pester is not installed."
          }

      - name: Run Unit Tests
        shell: pwsh
        run: |
          Get-ChildItem -Path ".\UnitTests\" -Filter *.ps1 | ForEach-Object { . $_.FullName }

  build:
    runs-on: windows-latest
    needs: unittest  # Ensure the build job runs only after unittest job succeeds
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install PowerShellProTools
        shell: pwsh
        run: |
          if (-not (Get-Module -ListAvailable -Name PowerShellProTools)) {
              Install-Module -Name PowerShellProTools -Force
          }
          Import-Module PowerShellProTools

      - name: Start Script Watcher
        shell: pwsh
        run: |
          .\modules\Watch-ScriptsFolder.ps1
          
      - name: Build Executable
        shell: pwsh
        run: |
          Copy-Item -Path "icon.ico" -Destination "C:\\icon.ico"
          Merge-Script -ConfigFile 'package.psd1' -Verbose   

      - name: Commit and Push Executable
        shell: pwsh
        run: |        
          if (Test-Path 'ScriptManager.exe') {
              git config --global user.name "GitHub Action"
              git config --global user.email "action@github.com"
              git add ScriptManager.exe
              git add ScriptManager.ps1
              git commit -m "Add ScriptManager.exe"
              git push || Write-Host "Failed to push changes"
          } else {
              Write-Host "Executable not found"
          }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
